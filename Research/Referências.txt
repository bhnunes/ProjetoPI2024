https://www.americana.sp.gov.br/portal_sde/sde-index.php?p=habitacao

=======================================================================

https://openweathermap.org/api/geocoding-api

=======================================================================

https://codigo-postal.org/pt-br/brasil/sp/americana/

=======================================================================

To start your project using Flask as the framework and MySQL as the database, follow these steps:

1. **Set Up Your Environment**:
   - Install Python if you haven't already. Make sure to add Python to your PATH during installation.
   - Install MySQL Community Server and MySQL Workbench. If you already have MySQL installed, you can skip this step.
   - Install Flask and Flask-MySQLdb using pip:
     ```
     pip install flask
     pip install flask-mysqldb
     ```

2. **Create Your Flask Application**:
   - Initialize a new Flask application. Create a new Python file (e.g., `app.py`) and set up the basic Flask app structure:
     ```python
     from flask import Flask, render_template, request, redirect, url_for, session
     from flask_mysqldb import MySQL

     app = Flask(__name__)
     app.secret_key = 'your_secret_key'

     # MySQL connection configuration
     app.config['MYSQL_HOST'] = 'localhost'
     app.config['MYSQL_USER'] = 'your_mysql_user'
     app.config['MYSQL_PASSWORD'] = 'your_mysql_password'
     app.config['MYSQL_DB'] = 'your_database_name'

     mysql = MySQL(app)

     @app.route('/')
     def index():
         return render_template('index.html')

     if __name__ == '__main__':
         app.run(debug=True)
     ```

3. **Create Your Database and Tables**:
   - Use MySQL Workbench or a similar tool to create your database and the necessary tables. For example, you might have a `users` table to store user information.

4. **Implement Forms for User Input**:
   - Create HTML forms for user input. You can use Flask's `render_template` function to render these forms in your templates. For example, create a `login.html` file with a form for user login:
     ```html
     <form id="loginForm" onsubmit="handleLogin(event)">
         <input type="text" id="username" placeholder="Username">
         <input type="password" id="password" placeholder="Password">
         <button type="submit">Login</button>
     </form>
     ```
   - Implement JavaScript functions to handle form submissions, such as `handleLogin` for the login form.

5. **Handle Form Submissions in Flask**:
   - In your Flask application, create routes to handle form submissions. Use the `request` object to access form data and interact with your MySQL database. For example, to handle user login:
     ```python
     @app.route('/login', methods=['POST'])
     def login():
         username = request.form['username']
         password = request.form['password']
         # Validate user credentials and log them in
         return redirect(url_for('dashboard'))
     ```

6. **Create a Dashboard View**:
   - Implement a dashboard view that fetches data from your MySQL database and displays it. Use Flask's `render_template` function to render a dashboard template, passing the data to it:
     ```python
     @app.route('/dashboard')
     def dashboard():
         users = mysql.connection.cursor().execute("SELECT * FROM users")
         return render_template('dashboard.html', users=users)
     ```
   - In your `dashboard.html` template, iterate over the data to display it:
     ```html
     {% for user in users %}
         <div>{{ user.name }}</div>
     {% endfor %}
     ```

7. **Run Your Flask Application**:
   - Start your Flask application by running `python app.py` in your terminal. This will start a development server, and you can access your application by navigating to `http://localhost:5000` in your web browser.

By following these steps, you'll have a basic Flask application that uses MySQL for data storage, with views for user input and data display. Remember to adjust the database connection details and SQL queries according to your specific database schema and requirements.

Citations:
[1] https://www.digitalocean.com/community/tutorials/how-to-use-flask-sqlalchemy-to-interact-with-databases-in-a-flask-application
[2] https://marketsplash.com/tutorials/flask/how-to-create-a-flask-dashboard/
[3] https://pythonprogramming.net/flask-user-dashboard/
[4] https://dev.to/phylis/loginregistration-form-with-python-flask-and-mysql-3hek
[5] https://codeshack.io/login-system-python-flask-mysql/
[6] https://www.digitalocean.com/community/tutorials/how-to-use-web-forms-in-a-flask-application
[7] https://dev.to/geektechpub/flask-blog-tutorial-2-user-registration-and-interacting-with-mysql-2gj0
[8] https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-iii-web-forms
[9] https://www.freecodecamp.org/news/develop-database-driven-web-apps-with-python-flask-and-mysql/
[10] https://code.tutsplus.com/series/creating-a-web-app-from-scratch-using-python-flask-and-mysql--cms-827
[11] https://www.digitalocean.com/community/tutorials/how-to-use-and-validate-web-forms-with-flask-wtf
[12] https://www.geeksforgeeks.org/login-and-registration-project-using-flask-and-mysql/
[13] https://code.tutsplus.com/creating-a-web-app-from-scratch-using-python-flask-and-mysql--cms-22972t
[14] https://stackoverflow.com/questions/73956049/submission-of-form-in-mysql-database-using-flask
[15] https://geek-tech.hashnode.dev/flask-blog-tutorial-2-user-registration-and-interacting-with-mysql

