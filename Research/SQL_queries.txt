#Create table USERINPUT:

CREATE TABLE USERINPUT(
    ID INT AUTO_INCREMENT PRIMARY KEY
    RUA VARCHAR(250) NOT NULL,
    BAIRRO VARCHAR(250) NOT NULL,
    CIDADE VARCHAR(60) NOT NULL,
    TIPO_RECLAMACAO VARCHAR(60) NOT NULL,
    COMENTARIO VARCHAR(2000) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    RESOLVIDO BOOLEAN,
    RESOLVIDO_AT TIMESTAMP NULL
);

----------------------------------------------------------------------------

#Create Table Locations

CREATE TABLE LOCATIONS(
    ID INT AUTO_INCREMENT PRIMARY KEY,
    RUA VARCHAR(250) NOT NULL,
    BAIRRO VARCHAR(250) NOT NULL,
    CIDADE VARCHAR(60) NOT NULL,
    CEP VARCHAR(25) NOT NULL,
    LATITUDE DECIMAL(9,6),
    LONGITUDE DECIMAL(9,6)
);


----------------------------------------------------------------------------

#Insert Value

INSERT INTO sys.userinput (RUA, BAIRRO, CIDADE, TIPO_RECLAMACAO, COMENTARIO, RESOLVIDO) VALUES ('Your Rua Value', 'Your Bairro Value', 'Your Cidade Value', 'Your Tipo Reclamacao Value', 'Your Comentario Value',true);

----------------------------------------------------------------------------

#Update Status of RESOLVIDO

UPDATE sys.userinput SET [RESOLVIDO]=true WHERE ID=1 ;

----------------------------------------------------------------------------

#Trigger for Resolvido 

DELIMITER $$
CREATE TRIGGER update_resolvido_at
BEFORE UPDATE ON sys.userinput
FOR EACH ROW
BEGIN
    IF NEW.RESOLVIDO = TRUE THEN
        SET NEW.RESOLVIDO_AT = CURRENT_TIMESTAMP;
    ELSE
        SET NEW.RESOLVIDO_AT = NULL;
    END IF;
END$$
DELIMITER ;


-----------------------------------------------------------------------------

To create columns for Latitude and Longitude in your MySQL table, you have two primary options: using separate columns for each (Latitude and Longitude) or using a single column with the `POINT` data type. The choice between these options depends on your specific requirements, such as whether you need to perform spatial queries or simply store the coordinates.

### Using Separate Columns

If you choose to use separate columns for Latitude and Longitude, you can use the `DECIMAL` data type. This is suitable for storing precise decimal values, which is important for geographical coordinates. The precision and scale of the `DECIMAL` type can be adjusted based on your needs. For example, you might use `DECIMAL(9,6)` to store latitude and longitude values with up to 6 decimal places.

```sql
CREATE TABLE locations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    latitude DECIMAL(9,6),
    longitude DECIMAL(9,6)
);
```

### Using the `POINT` Data Type

Alternatively, you can use the `POINT` data type to store both latitude and longitude in a single column. This approach is beneficial for spatial queries, as it allows you to leverage MySQL's spatial functions and indexes. The `POINT` data type represents a single location in coordinate space and can be used for spatial indexing.

```sql
CREATE TABLE locations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    coordinates POINT
);
```

To insert data into a table with a `POINT` column, you can use the `ST_PointFromText` function:

```sql
INSERT INTO locations (coordinates) VALUES (ST_PointFromText('POINT(40.7128 -74.0060)'));
```

And to query the latitude and longitude from a `POINT` column, you can use the `ST_X` and `ST_Y` functions:

```sql
SELECT ST_X(coordinates) AS longitude, ST_Y(coordinates) AS latitude FROM locations;
```

Both approaches have their use cases. If you need to perform spatial queries or calculations, using the `POINT` data type is more efficient. However, if you only need to store and retrieve the coordinates without performing spatial operations, separate columns with the `DECIMAL` data type might be simpler and more straightforward [1][3].

Citations:
[1] https://stackoverflow.com/questions/12504208/what-mysql-data-type-should-be-used-for-latitude-longitude-with-8-decimal-places
[2] https://www.slingacademy.com/article/mysql-8-right-way-store-location-latitude-longitude-table/
[3] https://stackoverflow.com/questions/9560147/datatype-to-store-longitude-latitude-in-mysql
[4] https://dev.mysql.com/doc/refman/8.0/en/creating-spatial-columns.html
[5] https://dev.mysql.com/doc/refman/8.0/en/populating-spatial-columns.html
[6] https://dba.stackexchange.com/questions/107089/decimal-or-point-data-type-for-storing-geo-location-data-in-mysql
[7] https://dev.mysql.com/doc/refman/8.0/en/spatial-type-overview.html
[8] https://planetscale.com/blog/geospatial-features-mysql
[9] https://dev.mysql.com/doc/refman/8.0/en/gis-point-property-functions.html
[10] https://www.slingacademy.com/article/mysql-8-calculate-distance-between-two-locations/
[11] https://stackoverflow.com/questions/41699848/latitude-and-longitude-mysql-field-type
[12] https://dev.mysql.com/doc/refman/8.0/en/spatial-reference-systems.html
[13] https://stackoverflow.com/questions/39612856/create-mysql-spatial-column-point-data-type-with-lat-long-without-using-alter
[14] https://stackoverflow.com/questions/39735441/how-do-i-properly-insert-latitude-longitude-coordinates-into-mysql-float
[15] https://stackoverflow.com/questions/5756232/moving-lat-lon-text-columns-into-a-point-type-column


---------------------------------------------------
Queries em IBM DB2:

CREATE TABLE USERINPUT (
    ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    RUA VARCHAR(250) NOT NULL,
    BAIRRO VARCHAR(250) NOT NULL,
    CIDADE VARCHAR(60) NOT NULL,
    TIPO_RECLAMACAO VARCHAR(60) NOT NULL,
    COMENTARIO VARCHAR(2000) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT TIMESTAMP,
    RESOLVIDO SMALLINT,
    RESOLVIDO_AT TIMESTAMP NULL
);

-----------------------------------------------------

CREATE TABLE LOCATIONS (
    ID INT GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY,
    RUA VARCHAR(250) NOT NULL,
    BAIRRO VARCHAR(250) NOT NULL,
    CIDADE VARCHAR(60) NOT NULL,
    CEP VARCHAR(25) NOT NULL,
    LATITUDE DECIMAL(9,6),
    LONGITUDE DECIMAL(9,6)
);

----------------------------------------------------
Trigger:

CREATE TRIGGER update_resolvido_at
    BEFORE UPDATE ON USERINPUT
    REFERENCING NEW AS NROW
    FOR EACH ROW MODE DB2SQL
BEGIN ATOMIC
    IF NROW.RESOLVIDO = 1 THEN
        SET NROW.RESOLVIDO_AT = CURRENT TIMESTAMP;
    ELSE
        SET NROW.RESOLVIDO_AT = NULL;
    END IF;
END


